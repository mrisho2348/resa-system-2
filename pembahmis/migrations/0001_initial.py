# Generated by Django 4.2.9 on 2025-09-05 19:21

from django.db import migrations, models
import django.db.models.deletion
import django_ckeditor_5.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('clinic', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PembaCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the company or organization.', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Pemba Company',
                'verbose_name_plural': 'Pemba Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PembaDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_name', models.CharField(help_text="Name of the diagnosis (e.g., 'Hypertension').", max_length=255, unique=True)),
                ('diagnosis_code', models.CharField(default='', help_text='Unique code for the diagnosis (e.g., ICD-10 code).', max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded this diagnosis.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Pemba Diagnosis',
                'verbose_name_plural': 'Pemba Diagnoses',
                'ordering': ['diagnosis_name'],
            },
        ),
        migrations.CreateModel(
            name='PembaMedicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drug_name', models.CharField(help_text='Name of the medicine or drug.', max_length=100)),
                ('drug_type', models.CharField(blank=True, help_text='Type of drug (e.g., Tablet, Syrup, Injection).', max_length=20, null=True)),
                ('formulation_unit', models.CharField(help_text="Formulation unit (e.g., '500mg', '5ml').", max_length=50)),
                ('dividing_unit', models.PositiveIntegerField(blank=True, help_text='Smallest divisible unit in mg or ml, e.g., 125.', null=True)),
                ('is_dividable', models.BooleanField(default=False, help_text='Is this drug divisible in smaller units?')),
                ('is_clinic_stock', models.BooleanField(default=True, help_text='Is this drug part of clinic stock?')),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer of the medicine.', max_length=100, null=True)),
                ('quantity', models.PositiveIntegerField(blank=True, help_text='Total quantity available.', null=True)),
                ('remain_quantity', models.PositiveIntegerField(blank=True, help_text='Remaining quantity in stock.', null=True)),
                ('batch_number', models.CharField(blank=True, help_text='Batch number for tracking.', max_length=20, null=True, unique=True)),
                ('expiration_date', models.DateField(blank=True, help_text='Expiration date of the medicine.', null=True)),
                ('minimum_stock_level', models.PositiveIntegerField(default=0, help_text='Minimum threshold before restocking.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the pemba medicine was added.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the pemba medicine was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this pemba medicine.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pemba_medicines', to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Pemba Medicine',
                'verbose_name_plural': 'Pemba Medicines',
                'ordering': ['drug_name'],
            },
        ),
        migrations.CreateModel(
            name='PembaPatient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mrn', models.CharField(editable=False, help_text='Medical Record Number (auto-generated).', max_length=20, unique=True, verbose_name='MRN')),
                ('first_name', models.CharField(help_text="Patient's first name.", max_length=100)),
                ('middle_name', models.CharField(blank=True, default='', help_text="Patient's middle name (optional).", max_length=100)),
                ('last_name', models.CharField(help_text="Patient's last name.", max_length=100)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], help_text="Patient's gender.", max_length=10)),
                ('age', models.PositiveIntegerField(blank=True, help_text="Patient's age.", null=True)),
                ('dob', models.DateField(blank=True, help_text='Date of birth.', null=True)),
                ('phone', models.CharField(help_text="Patient's phone number.", max_length=20)),
                ('osha_certificate', models.BooleanField(default=False, help_text='Whether the patient has an OSHA certificate.')),
                ('date_of_osha_certification', models.DateField(blank=True, help_text='Date of OSHA certification.', null=True)),
                ('insurance', models.CharField(choices=[('Uninsured', 'Uninsured'), ('Insured', 'Insured'), ('Unknown', 'Unknown')], help_text='Insurance status.', max_length=20)),
                ('insurance_company', models.CharField(blank=True, help_text='Name of the insurance company.', max_length=100, null=True)),
                ('other_insurance_company', models.CharField(blank=True, help_text='Other insurance company (if not listed).', max_length=100, null=True)),
                ('insurance_number', models.CharField(blank=True, help_text='Insurance policy number.', max_length=100, null=True)),
                ('emergency_contact_name', models.CharField(help_text='Name of emergency contact.', max_length=100)),
                ('emergency_contact_relation', models.CharField(blank=True, help_text='Relationship to emergency contact.', max_length=100, null=True)),
                ('other_emergency_contact_relation', models.CharField(blank=True, help_text='Other relationship to emergency contact.', max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(help_text='Phone number of emergency contact.', max_length=20)),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed')], default='Single', help_text='Marital status.', max_length=20)),
                ('occupation', models.CharField(blank=True, help_text="Patient's occupation.", max_length=100, null=True)),
                ('other_occupation', models.CharField(blank=True, help_text='Other occupation (if not listed).', max_length=100, null=True)),
                ('patient_type', models.CharField(blank=True, help_text='Type of patient.', max_length=100, null=True)),
                ('other_patient_type', models.CharField(blank=True, help_text='Other patient type (if not listed).', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the patient was registered.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the patient record was last updated.', verbose_name='Updated At')),
                ('company', models.ForeignKey(help_text='Company or organization associated with the patient.', on_delete=django.db.models.deletion.PROTECT, to='pembahmis.pembacompany')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who registered the patient.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_pemba_patients', to='clinic.staffs')),
                ('nationality', models.ForeignKey(help_text="Patient's nationality.", on_delete=django.db.models.deletion.PROTECT, to='clinic.country')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientVisits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vst', models.CharField(editable=False, help_text='Visit serial number (auto-generated).', max_length=20, unique=True)),
                ('visit_type', models.CharField(choices=[('Normal', 'Normal'), ('Emergency', 'Emergency'), ('Referral', 'Referral'), ('Follow up', 'Follow up')], help_text='Type of the visit.', max_length=15)),
                ('primary_service', models.CharField(help_text='Primary service for the visit.', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the visit was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the visit was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the visit.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pemba_patient_visits', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient attending the visit.', on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='pembahmis.pembapatient')),
            ],
            options={
                'verbose_name': 'Visit',
                'verbose_name_plural': 'Visits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PembaService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the pemba service.', max_length=225, unique=True)),
                ('description', models.TextField(default='', help_text='Description of the service.')),
                ('category', models.CharField(blank=True, help_text='Category of the service.', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the service was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the service was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who created the service record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pemba_services', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='PembaReferral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_location', models.CharField(default='resa medical hospital', help_text='Source location of the patient.', max_length=255)),
                ('destination_location', models.CharField(help_text='Destination location for MedEvac.', max_length=255)),
                ('rfn', models.CharField(editable=False, help_text='Referral number (auto-generated).', max_length=20, unique=True)),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Referral notes.', null=True)),
                ('nature_of_referral', models.CharField(choices=[('Med Evac', 'Med Evac'), ('Referred', 'Referral')], default='Referred', help_text='Nature of the referral.', max_length=20)),
                ('transport_model', models.CharField(choices=[('Ground Ambulance', 'Ground Ambulance'), ('Air Ambulance', 'Air Ambulance'), ('Private Vehicle', 'Private Vehicle'), ('Self Transport', 'Self Transport'), ('Company Walking', 'Company Walking'), ('Walking', 'Walking'), ('Motorcycle', 'Motorcycle'), ('Others', 'Others'), ('Unknown', 'Unknown')], default='Ground Ambulance', help_text='Mode of transport for the referral.', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', help_text='Status of the referral.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the referral was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the referral was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the referral.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_pemba_referrals', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient being referred.', on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='Visit associated with the referral.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaReagent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('supplier', models.CharField(blank=True, max_length=255, null=True)),
                ('quantity', models.PositiveIntegerField()),
                ('expiry_date', models.DateField()),
                ('storage_conditions', models.TextField(blank=True, null=True)),
                ('date_received', models.DateField(auto_now_add=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pemba_reagent_records', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='PembaProcedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='Description of the procedure.')),
                ('result', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Result of the procedure.', null=True)),
                ('image', models.ImageField(blank=True, help_text='Image related to the procedure.', null=True, upload_to='procedure_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the procedure was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the procedure record was last updated.')),
                ('doctor', models.ForeignKey(blank=True, help_text='Doctor who performed the procedure.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_procedures', to='clinic.staffs')),
                ('name', models.ForeignKey(blank=True, help_text='Name of the procedure.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='procedure_records', to='pembahmis.pembaservice')),
                ('patient', models.ForeignKey(help_text='Patient who underwent the procedure.', on_delete=django.db.models.deletion.CASCADE, related_name='procedures', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(help_text='Visit associated with the procedure.', on_delete=django.db.models.deletion.CASCADE, related_name='procedures', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientVital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the vitals were recorded.')),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Respiratory rate (breaths per minute).', null=True)),
                ('pulse_rate', models.PositiveIntegerField(blank=True, help_text='Pulse rate (beats per minute).', null=True)),
                ('sbp', models.PositiveIntegerField(blank=True, help_text='Systolic Blood Pressure (mmHg).', null=True)),
                ('dbp', models.PositiveIntegerField(blank=True, help_text='Diastolic Blood Pressure (mmHg).', null=True)),
                ('blood_pressure', models.CharField(blank=True, help_text="Blood pressure in format 'SBP/DBP'.", max_length=7, null=True)),
                ('spo2', models.PositiveIntegerField(blank=True, help_text='Oxygen saturation (SPO2) in percent.', null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, default=37.5, help_text='Body temperature in Celsius.', max_digits=4, null=True)),
                ('gcs', models.PositiveIntegerField(blank=True, help_text='Glasgow Coma Scale score.', null=True)),
                ('avpu', models.CharField(blank=True, help_text='AVPU scale value.', max_length=20, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the vitals were last updated.')),
                ('doctor', models.ForeignKey(blank=True, help_text='Doctor who recorded the vitals.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_vitals', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient whose vitals are recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='vitals', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(help_text='Visit during which vitals were recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='vitals', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientSurgery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surgery_name', models.CharField(blank=True, help_text='Name of the surgery.', max_length=100, null=True)),
                ('surgery_date', models.DateField(blank=True, help_text='Date when the surgery was performed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the surgery record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the surgery record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the surgery.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_surgeries', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient who underwent the surgery.', on_delete=django.db.models.deletion.CASCADE, related_name='surgeries', to='pembahmis.pembapatient')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientMedicationAllergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.CharField(help_text='Description of the allergic reaction.', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the allergy was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the allergy record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the allergy.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_medication_allergies', to='clinic.staffs')),
                ('medicine', models.ForeignKey(help_text='Medicine to which the patient is allergic.', on_delete=django.db.models.deletion.CASCADE, related_name='allergy_records', to='pembahmis.pembamedicine')),
                ('patient', models.ForeignKey(help_text='Patient with the medication allergy.', on_delete=django.db.models.deletion.CASCADE, related_name='medication_allergies', to='pembahmis.pembapatient')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientLifestyleBehavior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekly_exercise_frequency', models.CharField(blank=True, help_text='How often the patient exercises per week.', max_length=32, null=True)),
                ('smoking', models.CharField(blank=True, help_text='Smoking status of the patient.', max_length=32, null=True)),
                ('alcohol_consumption', models.CharField(blank=True, help_text='Alcohol consumption status.', max_length=32, null=True)),
                ('healthy_diet', models.CharField(blank=True, help_text='Whether the patient follows a healthy diet.', max_length=32, null=True)),
                ('stress_management', models.CharField(blank=True, help_text="Patient's stress management habits.", max_length=32, null=True)),
                ('sufficient_sleep', models.CharField(blank=True, help_text='Whether the patient gets sufficient sleep.', max_length=32, null=True)),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the lifestyle behavior.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patient_lifestyle_behaviors', to='clinic.staffs')),
                ('patient', models.OneToOneField(help_text='Patient whose lifestyle is being recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='lifestyle_behavior', to='pembahmis.pembapatient')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientHealthCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health_condition', models.CharField(blank=True, help_text='Name of the health condition.', max_length=200, null=True, verbose_name='Health Condition')),
                ('health_condition_notes', models.CharField(blank=True, help_text='Additional notes about the health condition.', max_length=200, null=True, verbose_name='Health Condition Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the health condition was recorded.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the health condition was last updated.', verbose_name='Updated At')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the health condition.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_health_conditions', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient with the health condition.', on_delete=django.db.models.deletion.CASCADE, related_name='health_conditions', to='pembahmis.pembapatient', verbose_name='Patient')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPatientDiagnosisRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the diagnosis record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the diagnosis record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the diagnosis.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_diagnosis_records', to='clinic.staffs')),
                ('final_diagnosis', models.ManyToManyField(help_text='Final diagnoses.', related_name='pemba_final_diagnosis_records', to='pembahmis.pembadiagnosis')),
                ('patient', models.ForeignKey(help_text='Patient for whom the diagnosis is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_records', to='pembahmis.pembapatient')),
                ('provisional_diagnosis', models.ManyToManyField(help_text='Provisional diagnoses.', related_name='pemba_provisional_diagnosis_records', to='pembahmis.pembadiagnosis')),
                ('visit', models.ForeignKey(help_text='Visit associated with the diagnosis.', on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis_records', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaObservationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Observation notes.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the observation was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the observation was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the observation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_observations', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient for whom the observation is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='observation_records', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(help_text='Visit associated with the observation.', on_delete=django.db.models.deletion.CASCADE, related_name='observation_records', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaLaboratoryRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Result of the laboratory test.', null=True)),
                ('lab_number', models.CharField(help_text='Laboratory request number (auto-generated).', max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the laboratory request was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the laboratory request was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the laboratory request.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_lab_requests', to='clinic.staffs')),
                ('name', models.ForeignKey(blank=True, help_text='Laboratory service requested.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='laboratory_requests', to='pembahmis.pembaservice')),
                ('patient', models.ForeignKey(help_text='Patient for whom the laboratory request is made.', on_delete=django.db.models.deletion.CASCADE, related_name='laboratory_requests', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='Visit associated with the laboratory request.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='laboratory_requests', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaImagingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Description of the imaging.', null=True)),
                ('result', models.TextField(blank=True, help_text='Result of the imaging.', null=True)),
                ('image', models.ImageField(blank=True, help_text='Image file of the imaging result.', null=True, upload_to='imaging_records/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the imaging record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the imaging record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the imaging.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_imaging', to='clinic.staffs')),
                ('imaging', models.ForeignKey(blank=True, help_text='Imaging service performed.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pemba_imaging_records', to='clinic.service')),
                ('patient', models.ForeignKey(help_text='Patient for whom the imaging was performed.', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_records', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(help_text='Visit associated with the imaging.', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_records', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaHealthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pemba_health_records', to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Pemba Health Record',
                'verbose_name_plural': 'Pemba Health Records',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PembaFamilyMedicalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(help_text='Medical condition present in the family.', max_length=100, verbose_name='Condition')),
                ('relationship', models.CharField(blank=True, help_text='Relationship of the family member to the patient.', max_length=100, null=True, verbose_name='Relationship')),
                ('comments', models.CharField(blank=True, help_text='Additional comments.', max_length=100, null=True, verbose_name='Comments')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the family history was recorded.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the family history was last updated.', verbose_name='Updated At')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the family history.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_family_histories', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient whose family history is being recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='family_medical_history', to='pembahmis.pembapatient', verbose_name='Patient')),
            ],
        ),
        migrations.CreateModel(
            name='PembaEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('serial_number', models.CharField(max_length=255, unique=True)),
                ('manufacturer', models.CharField(blank=True, max_length=255, null=True)),
                ('purchase_date', models.DateField()),
                ('warranty_expiry_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(choices=[('Operational', 'Operational'), ('Under Maintenance', 'Under Maintenance'), ('Out of Service', 'Out of Service')], default='Operational', max_length=50)),
                ('date_added', models.DateField(auto_now_add=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pemba_equipment_records', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='PembaDischargesNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discharge_condition', models.CharField(help_text='Condition of the patient at discharge.', max_length=255)),
                ('discharge_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Discharge notes.', null=True)),
                ('discharge_date', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the patient was discharged.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the discharge record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the discharge.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_pemba_discharges', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient being discharged.', on_delete=django.db.models.deletion.CASCADE, related_name='discharge_notes', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='Visit associated with the discharge.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discharge_notes', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaCounseling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counselling_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Counseling notes.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the counseling was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the counseling record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the counseling.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_pemba_counselings', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient who received counseling.', on_delete=django.db.models.deletion.CASCADE, related_name='counselings', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='Visit associated with the counseling.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counselings', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaConsultationNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_of_presenting_illness', models.TextField(blank=True, help_text='History of presenting illness.', null=True)),
                ('review_of_systems', models.TextField(blank=True, help_text='Review of systems.', null=True)),
                ('physical_examination', models.TextField(blank=True, help_text='Physical examination findings.', null=True)),
                ('doctor_plan', models.TextField(help_text="Doctor's plan.")),
                ('doctor_plan_note', models.TextField(blank=True, help_text="Additional notes on the doctor's plan.", null=True)),
                ('allergy_summary', models.TextField(blank=True, help_text='Summary of allergies.', null=True)),
                ('known_comorbidities_summary', models.TextField(blank=True, help_text='Summary of known comorbidities.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the consultation notes were created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the consultation notes were last updated.')),
                ('doctor', models.ForeignKey(help_text='Doctor who wrote the consultation notes.', on_delete=django.db.models.deletion.PROTECT, related_name='pemba_consultation_notes', to='clinic.staffs')),
                ('pathology', models.ManyToManyField(blank=True, help_text='Pathology records associated with the consultation.', to='clinic.pathodologyrecord')),
                ('patient', models.ForeignKey(help_text='Patient for whom the notes are written.', on_delete=django.db.models.deletion.CASCADE, related_name='consultation_notes', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='Visit associated with the consultation notes.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consultation_notes', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaChiefComplaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('other_complaint', models.CharField(help_text='Description of the chief complaint or other symptoms.', max_length=100)),
                ('duration', models.CharField(help_text='Duration of the complaint or symptoms.', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the chief complaint was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the chief complaint was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this chief complaint.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chief_complaints', to='clinic.staffs')),
                ('health_record', models.ForeignKey(blank=True, help_text='The health record associated with this complaint.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pembahmis.pembahealthrecord')),
                ('patient', models.ForeignKey(help_text='The pemba patient reporting the chief complaint.', on_delete=django.db.models.deletion.CASCADE, to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this chief complaint.', null=True, on_delete=django.db.models.deletion.CASCADE, to='pembahmis.pembapatientvisits')),
            ],
            options={
                'verbose_name': 'Chief Complaint',
                'verbose_name_plural': 'Chief Complaints',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PembaAppointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField(help_text='Date of the consultation appointment.')),
                ('start_time', models.TimeField(blank=True, help_text='Start time of the consultation.', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='End time of the consultation.', null=True)),
                ('description', models.TextField(blank=True, help_text='Description or notes for the consultation.', null=True)),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Completed'), (2, 'Canceled'), (3, 'Rescheduled'), (4, 'No-show'), (5, 'In Progress'), (6, 'Confirmed'), (7, 'Arrived')], default=0, help_text='Status of the consultation.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the consultation was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the consultation was last updated.')),
                ('created_by', models.ForeignKey(blank=True, help_text='Staff member who created the consultation record.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_pemba_consultations', to='clinic.staffs')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='Staff member who recorded the consultation.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_pemba_consultations', to='clinic.staffs')),
                ('doctor', models.ForeignKey(help_text='Doctor assigned to the consultation.', on_delete=django.db.models.deletion.PROTECT, related_name='pemba_consultations', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='Patient for whom the consultation is scheduled.', on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(blank=True, help_text='Visit associated with the consultation.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='pembahmis.pembapatientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PembaPrescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prs_no', models.CharField(editable=False, help_text='Unique prescription number, auto-generated.', max_length=20, unique=True)),
                ('dose', models.CharField(help_text="Dosage instructions for the medicine (e.g., '1 tablet', '10ml').", max_length=50)),
                ('duration', models.CharField(help_text="Duration for which the medicine should be taken (e.g., '7 days', '2 weeks').", max_length=50)),
                ('quantity_used', models.PositiveIntegerField(help_text='Quantity of the medicine prescribed.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the prescription was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the prescription was last updated.')),
                ('entered_by', models.ForeignKey(blank=True, help_text='Staff member who entered the prescription.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entered_pemba_prescriptions', to='clinic.staffs')),
                ('frequency', models.ForeignKey(blank=True, help_text='Frequency at which the medicine should be taken.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pemba_prescriptions', to='clinic.prescriptionfrequency')),
                ('medicine', models.ForeignKey(help_text='The medicine prescribed to the patient.', on_delete=django.db.models.deletion.PROTECT, related_name='prescriptions', to='pembahmis.pembamedicine')),
                ('patient', models.ForeignKey(help_text='The pemba patient to whom this prescription belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='pemba_prescriptions', to='pembahmis.pembapatient')),
                ('visit', models.ForeignKey(help_text='The pemba patient visit associated with this prescription.', on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='pembahmis.pembapatientvisits')),
            ],
            options={
                'verbose_name': 'Pemba Prescription',
                'verbose_name_plural': 'Pemba Prescriptions',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['patient', 'visit'], name='pembahmis_p_patient_844515_idx'), models.Index(fields=['prs_no'], name='pembahmis_p_prs_no_134a75_idx'), models.Index(fields=['created_at'], name='pembahmis_p_created_49b095_idx')],
            },
        ),
    ]
