# Generated by Django 4.2.9 on 2025-09-05 19:20

import datetime
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_ckeditor_5.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('1', 'AdminHOD'), ('2', 'Staffs')], default='1', max_length=2)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_groups', related_query_name='user', to='auth.group', verbose_name='Groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_user_permissions', related_query_name='user', to='auth.permission', verbose_name='User permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Clients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the client or company.', max_length=100)),
                ('email', models.EmailField(blank=True, help_text='Email address of the client.', max_length=254)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number for the client.', max_length=20)),
                ('address', models.CharField(blank=True, help_text='Physical or mailing address of the client.', max_length=200)),
                ('contact_person', models.CharField(blank=True, help_text='Name of the primary contact person for the client.', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the client record was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the client record was last updated.')),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContactDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=15)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('subscribe_newsletter', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DeductionOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rate', models.DecimalField(decimal_places=2, max_digits=5)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis_name', models.CharField(max_length=255, unique=True)),
                ('diagnosis_code', models.CharField(default='', max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True)),
                ('department', models.CharField(max_length=100)),
                ('employment_type', models.CharField(choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time'), ('Contract', 'Contract')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('bank_account_number', models.CharField(max_length=30)),
                ('account_holder_name', models.CharField(blank=True, max_length=100, null=True)),
                ('tin_number', models.CharField(blank=True, max_length=20, null=True)),
                ('nssf_membership_number', models.CharField(blank=True, max_length=20, null=True)),
                ('nhif_number', models.CharField(blank=True, max_length=20, null=True)),
                ('wcf_number', models.CharField(blank=True, max_length=20, null=True)),
                ('tra_deduction_status', models.BooleanField(default=False)),
                ('nssf_deduction_status', models.BooleanField(default=False)),
                ('wcf_deduction_status', models.BooleanField(default=False)),
                ('heslb_deduction_status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bank_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinic.bankaccount')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Unique invoice number for tracking.', max_length=50, unique=True)),
                ('date', models.DateField(help_text='Date when the invoice was issued.')),
                ('due_date', models.DateField(help_text='Date when the invoice payment is due.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Total amount of the invoice.', max_digits=10)),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('pending', 'Pending'), ('overdue', 'Overdue')], help_text='Current status of the invoice payment.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the invoice was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the invoice was last updated.')),
                ('client', models.ForeignKey(help_text='The client for whom this invoice was created.', on_delete=django.db.models.deletion.CASCADE, to='clinic.clients')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Medicine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drug_name', models.CharField(help_text='Name of the medicine or drug.', max_length=100)),
                ('formulation_value', models.DecimalField(decimal_places=2, help_text='Numerical part of the formulation (e.g., 500, 5).', max_digits=10)),
                ('is_dividable', models.BooleanField(default=False, help_text='Is this drug divisible in smaller units?')),
                ('manufacturer', models.CharField(help_text='Manufacturer of the medicine.', max_length=100)),
                ('remain_quantity', models.PositiveIntegerField(blank=True, help_text='Remaining quantity in stock.', null=True)),
                ('quantity', models.PositiveIntegerField(blank=True, help_text='Total quantity received.', null=True)),
                ('batch_number', models.CharField(default='12345', help_text='Batch number for tracking.', max_length=20, unique=True)),
                ('expiration_date', models.DateField(help_text='Expiration date of the medicine.')),
                ('cash_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost for cash-paying patients.', max_digits=10, null=True)),
                ('insurance_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost for insurance-paying patients.', max_digits=10, null=True)),
                ('nhif_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Cost for NHIF-paying patients.', max_digits=10, null=True)),
                ('buying_price', models.DecimalField(blank=True, decimal_places=2, help_text='Purchase price of the medicine.', max_digits=10, null=True)),
                ('total_buying_price', models.DecimalField(blank=True, decimal_places=2, help_text='Total purchase price (buying_price * quantity).', max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Medicine',
                'verbose_name_plural': 'Medicines',
                'ordering': ['drug_name'],
            },
        ),
        migrations.CreateModel(
            name='Patients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mrn', models.CharField(editable=False, max_length=20, unique=True)),
                ('first_name', models.CharField(default='', max_length=100)),
                ('middle_name', models.CharField(blank=True, default='', max_length=100)),
                ('last_name', models.CharField(default='', max_length=100)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('phone', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('payment_form', models.CharField(choices=[('Cash', 'Cash'), ('Insurance', 'Insurance')], max_length=255)),
                ('insurance_name', models.CharField(blank=True, max_length=255, null=True)),
                ('insurance_number', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('nida_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientVisits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vst', models.CharField(editable=False, max_length=20, unique=True)),
                ('visit_type', models.CharField(choices=[('Normal', 'Normal'), ('Emergency', 'Emergency'), ('Referral', 'Referral'), ('Follow up', 'Follow up')], max_length=15)),
                ('visit_reason', models.TextField(blank=True, null=True)),
                ('referral_number', models.CharField(blank=True, max_length=50, null=True)),
                ('primary_service', models.CharField(max_length=50)),
                ('insurance_number', models.CharField(blank=True, max_length=50, null=True)),
                ('insurance_name', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_scheme', models.CharField(blank=True, max_length=50, null=True)),
                ('authorization_code', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Visit',
                'verbose_name_plural': 'Visits',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payroll_date', models.DateField()),
                ('total_salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('processed', 'Processed'), ('pending', 'Pending'), ('canceled', 'Canceled')], max_length=20)),
                ('details', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PrescriptionFrequency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the prescription frequency (e.g., 'Twice daily').", max_length=100)),
                ('interval', models.CharField(help_text="Time interval between doses (e.g., '12 hours').", max_length=50)),
                ('description', models.TextField(help_text='Detailed description of the prescription frequency.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the prescription frequency was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the prescription frequency was last updated.')),
            ],
            options={
                'verbose_name': 'Prescription Frequency',
                'verbose_name_plural': 'Prescription Frequencies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Staffs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('middle_name', models.TextField(blank=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=20)),
                ('date_of_birth', models.DateField(blank=True, default=datetime.date(2000, 1, 1))),
                ('phone_number', models.CharField(blank=True, max_length=14)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=20)),
                ('profession', models.CharField(blank=True, choices=[('doctor', 'Doctor'), ('nurse', 'Nurse'), ('pharmacist', 'Pharmacist'), ('developer', 'Developer'), ('designer', 'Designer'), ('manager', 'Manager'), ('radiologist', 'Radiologist'), ('lab_technician', 'Lab Technician'), ('receptionist', 'Receptionist'), ('physiotherapist', 'Physiotherapist'), ('accountant', 'Accountant'), ('security_guard', 'Security Guard'), ('chef', 'Chef'), ('cleaner', 'Cleaner')], max_length=20)),
                ('role', models.CharField(blank=True, choices=[('admin', 'Administrator'), ('doctor', 'Doctor'), ('nurse', 'Nurse'), ('physiotherapist', 'Physiotherapist'), ('labTechnician', 'Lab Technician'), ('pharmacist', 'Pharmacist'), ('receptionist', 'Receptionist')], max_length=20)),
                ('work_place', models.CharField(blank=True, choices=[('resa', 'Resa'), ('kahama', 'Kahama'), ('pemba', 'Pemba')], max_length=50)),
                ('joining_date', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('mct_number', models.CharField(blank=True, help_text='Medical Council of Tanzania (MCT) Number', max_length=50, null=True)),
                ('signature', models.ImageField(blank=True, help_text='Upload digital signature', null=True, upload_to='signatures/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WalkInCustomer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pharmacy_number', models.CharField(editable=False, help_text='Unique pharmacy/customer number for tracking.', max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], help_text='Customer gender', max_length=10, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('payment_form', models.CharField(choices=[('cash', 'Cash'), ('card', 'Card'), ('mobile_money', 'Mobile Money'), ('insurance', 'Insurance'), ('other', 'Other')], default='cash', help_text='Preferred payment method for the customer.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='WalkInVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_number', models.CharField(editable=False, help_text='Unique visit number (auto-generated).', max_length=12, unique=True)),
                ('visit_date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.walkincustomer')),
            ],
        ),
        migrations.CreateModel(
            name='WalkInPrescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route', models.CharField(blank=True, help_text='Route of administration', max_length=100, null=True)),
                ('formulation_dose', models.CharField(blank=True, help_text='Human-readable dosage instructions', max_length=255, null=True)),
                ('duration', models.PositiveIntegerField(help_text='Duration of treatment in days')),
                ('quantity_used', models.PositiveIntegerField()),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('verified', models.CharField(choices=[('verified', 'Verified'), ('not_verified', 'Not Verified')], default='not_verified', max_length=20)),
                ('issued', models.CharField(choices=[('issued', 'Issued'), ('not_issued', 'Not Issued')], default='not_issued', max_length=20)),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('unpaid', 'Unpaid')], default='unpaid', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('frequency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.prescriptionfrequency')),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.medicine')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.walkinvisit')),
            ],
            options={
                'verbose_name': 'Walk-In Prescription',
                'verbose_name_plural': 'Walk-In Prescriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type_service', models.CharField(blank=True, choices=[('Procedure', 'Procedure'), ('Laboratory', 'Laboratory'), ('Imaging', 'Imaging'), ('Drugs', 'Drugs'), ('Test', 'Test'), ('Consultation', 'Consultation'), ('Education', 'Education'), ('Examination', 'Examination'), ('Vaccination', 'Vaccination'), ('Medication', 'Medication'), ('Therapy', 'Therapy'), ('Rehabilitation', 'Rehabilitation'), ('Rental', 'Rental'), ('Plan', 'Plan')], max_length=200, null=True)),
                ('coverage', models.CharField(blank=True, choices=[('Cash', 'Cash'), ('Insurance', 'Insurance')], max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cash_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('insurance_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('nhif_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='services', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='SalaryPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_date', models.DateField()),
                ('payment_status', models.CharField(choices=[('paid', 'Paid'), ('pending', 'Pending'), ('failed', 'Failed')], max_length=20)),
                ('payment_details', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='salary_payments', to='clinic.staffs')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.employee')),
                ('payroll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.payroll')),
            ],
            options={
                'verbose_name': ' Salary Payment',
            },
        ),
        migrations.CreateModel(
            name='SalaryChangeRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('new_salary', models.DecimalField(decimal_places=2, max_digits=10)),
                ('change_date', models.DateField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='salary_change_records', to='clinic.staffs')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.employee')),
                ('payroll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.payroll')),
            ],
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_location', models.CharField(default='DIVINE TIS Mobile medical clinic', help_text='Source location of the patient', max_length=255)),
                ('destination_location', models.CharField(help_text='Destination location for MedEvac', max_length=255)),
                ('notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('nature_of_referral', models.CharField(choices=[('Med Evac', 'Med Evac'), ('Referred', 'Referral')], default='Referred', max_length=20)),
                ('transport_model', models.CharField(blank=True, choices=[('Ground Ambulance', 'Ground Ambulance'), ('Air Ambulance', 'Air Ambulance'), ('Private Vehicle', 'Private Vehicle'), ('Self Transport', 'Self Transport'), ('Company Walking', 'Company Walking'), ('Walking', 'Walking'), ('Motorcycle', 'Motorcycle'), ('Others', 'Others'), ('Unknown', 'Unknown')], default='Ground Ambulance', max_length=50, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='Reagent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the laboratory reagent.', max_length=100)),
                ('manufacturer', models.CharField(help_text='Manufacturer of the reagent.', max_length=100)),
                ('lot_number', models.CharField(help_text='Lot number for tracking and quality control.', max_length=50)),
                ('expiration_date', models.DateField(blank=True, help_text='Expiration date of the reagent.', null=True)),
                ('storage_conditions', models.TextField(blank=True, help_text='Storage conditions required for the reagent.')),
                ('quantity_in_stock', models.PositiveIntegerField(help_text='Total quantity of reagent in stock.')),
                ('remaining_quantity', models.PositiveIntegerField(help_text='Remaining quantity of reagent available for use.')),
                ('price_per_unit', models.DecimalField(decimal_places=2, help_text='Price per unit of the reagent.', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the reagent was added to inventory.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the reagent was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this reagent.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_reagent_records', to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Reagent',
                'verbose_name_plural': 'Reagents',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('order_date', models.DateField(blank=True, null=True)),
                ('result', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('equipments_used', models.CharField(max_length=255)),
                ('procedure_number', models.CharField(max_length=20, unique=True)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='procedure_data_recorder', to='clinic.staffs')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.service')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.AddField(
            model_name='prescriptionfrequency',
            name='data_recorder',
            field=models.ForeignKey(blank=True, help_text='The staff member who recorded this prescription frequency.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescription_frequencies', to='clinic.staffs'),
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formulation_dose', models.CharField(help_text='Dosage instructions for the medication.', max_length=50)),
                ('duration', models.CharField(help_text='Duration of the prescription treatment.', max_length=50)),
                ('quantity_used', models.PositiveIntegerField(help_text='Quantity of medicine prescribed.')),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, help_text='Total cost of the prescription.', max_digits=10, null=True)),
                ('verified', models.CharField(choices=[('verified', 'Verified'), ('Not Verified', 'Not Verified')], default='Not Verified', help_text='Whether the prescription has been verified by a pharmacist.', max_length=20)),
                ('issued', models.CharField(choices=[('issued', 'Issued'), ('Not Issued', 'Not Issued')], default='Not Issued', help_text='Whether the medication has been issued to the patient.', max_length=20)),
                ('status', models.CharField(choices=[('Paid', 'Paid'), ('Unpaid', 'Unpaid')], default='Unpaid', help_text='Payment status of the prescription.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the prescription was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the prescription was last updated.')),
                ('entered_by', models.ForeignKey(blank=True, help_text='The staff member who entered this prescription.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('frequency', models.ForeignKey(blank=True, help_text='The frequency of medication administration.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.prescriptionfrequency')),
                ('medicine', models.ForeignKey(help_text='The medicine being prescribed.', on_delete=django.db.models.deletion.CASCADE, to='clinic.medicine')),
                ('patient', models.ForeignKey(help_text='The patient for whom the prescription is written.', on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this prescription.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
            options={
                'verbose_name': 'Prescription',
                'verbose_name_plural': 'Prescriptions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='payroll',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payrolls', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='payroll',
            name='payment_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinic.paymentmethod'),
        ),
        migrations.AddField(
            model_name='paymentmethod',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to='clinic.staffs'),
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date when the payment was made.')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount of the payment.', max_digits=10)),
                ('description', models.TextField(blank=True, help_text='Description or notes about the payment.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the payment was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the payment was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this payment.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='clinic.staffs')),
                ('invoice', models.ForeignKey(blank=True, help_text='Invoice associated with this payment (if applicable).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinic.invoice')),
                ('method', models.ForeignKey(blank=True, help_text='Method used for the payment.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.paymentmethod')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PatientVital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Respiratory rate in breaths per minute', null=True)),
                ('pulse_rate', models.PositiveIntegerField(blank=True, help_text='Pulse rate in beats per minute', null=True)),
                ('blood_pressure', models.CharField(blank=True, help_text='Blood pressure measurement', max_length=20, null=True)),
                ('sbp', models.PositiveIntegerField(blank=True, help_text='Systolic Blood Pressure (mmHg)', null=True)),
                ('dbp', models.PositiveIntegerField(blank=True, help_text='Diastolic Blood Pressure (mmHg)', null=True)),
                ('spo2', models.PositiveIntegerField(blank=True, help_text='SPO2 measurement in percentage', null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=2, help_text='Temperature measurement in Celsius', max_digits=5, null=True)),
                ('gcs', models.PositiveIntegerField(blank=True, help_text='Glasgow Coma Scale measurement', null=True)),
                ('avpu', models.CharField(blank=True, help_text='AVPU scale measurement', max_length=20, null=True)),
                ('weight', models.CharField(blank=True, help_text='weight', max_length=20, null=True)),
                ('unique_identifier', models.CharField(editable=False, max_length=20, unique=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.AddField(
            model_name='patientvisits',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_visits', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='patientvisits',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients'),
        ),
        migrations.AddField(
            model_name='patients',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patients', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='patients',
            name='nationality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.country'),
        ),
        migrations.CreateModel(
            name='PatientDiagnosisRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('final_diagnosis', models.ManyToManyField(related_name='final_diagnosis_record', to='clinic.diagnosis')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('provisional_diagnosis', models.ManyToManyField(related_name='provisional_diagnosis_record', to='clinic.diagnosis')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='PathodologyRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pathology_records', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_date', models.DateField(blank=True, default=django.utils.timezone.now, help_text='The date when the order was placed.', null=True)),
                ('order_type', models.TextField(blank=True, help_text='Type of service or item being ordered.', null=True)),
                ('type_of_order', models.TextField(blank=True, help_text='Category of the order (e.g., Laboratory, Consultation, etc.).', null=True)),
                ('cost', models.DecimalField(decimal_places=2, help_text='The cost of the order.', max_digits=10)),
                ('status', models.CharField(choices=[('Paid', 'Paid'), ('Unpaid', 'Unpaid')], default='Unpaid', help_text='Payment status of the order.', max_length=100)),
                ('order_number', models.CharField(help_text='Unique identifier for this order.', max_length=12, unique=True)),
                ('is_read', models.BooleanField(default=False, help_text='Whether the order has been read/processed.')),
                ('added_by', models.ForeignKey(blank=True, help_text='The staff member who created this order.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('doctor', models.ForeignKey(blank=True, help_text='The doctor who ordered this service.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='The patient for whom the order is placed.', on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this order.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
            options={
                'verbose_name': 'Order',
                'verbose_name_plural': 'Orders',
                'ordering': ['-order_date'],
            },
        ),
        migrations.CreateModel(
            name='ObservationRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='MedicineUnitMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the unit (e.g., Milligram, Milliliter)', max_length=100)),
                ('short_name', models.CharField(default='', help_text='Short code (e.g., mg, ml, tab)', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medicine_unit_measures', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='MedicineType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the medicine type.', max_length=50, unique=True)),
                ('explanation', models.TextField(blank=True, help_text='Optional explanation or notes about this medicine type.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this medicine type.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicine_types', to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Medicine Type',
                'verbose_name_plural': 'Medicine Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MedicineRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('explanation', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medicine_routes', to='clinic.staffs')),
            ],
        ),
        migrations.AddField(
            model_name='medicine',
            name='data_recorder',
            field=models.ForeignKey(blank=True, help_text='The staff member who recorded this medicine.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medicines', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='drug_type',
            field=models.ForeignKey(blank=True, help_text='Type of drug (linked to MedicineType).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicines', to='clinic.medicinetype'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='formulation_unit',
            field=models.ForeignKey(help_text='Measurement unit (e.g., mg, ml, tablet).', on_delete=django.db.models.deletion.PROTECT, related_name='medicines', to='clinic.medicineunitmeasure'),
        ),
        migrations.AddField(
            model_name='medicine',
            name='route',
            field=models.ForeignKey(blank=True, help_text='Route of administration for this medicine.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medicines', to='clinic.medicineroute'),
        ),
        migrations.CreateModel(
            name='LaboratoryOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='Additional notes or description for the laboratory order.', null=True)),
                ('order_date', models.DateField(blank=True, help_text='The date the laboratory order was placed.', null=True)),
                ('result', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='The result of the laboratory test.', null=True)),
                ('lab_number', models.CharField(help_text='A unique identifier for this laboratory order.', max_length=20, unique=True)),
                ('cost', models.DecimalField(decimal_places=2, help_text='The cost of the laboratory test.', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the laboratory order was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the laboratory order was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this laboratory order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lab_data_recorder', to='clinic.staffs')),
                ('doctor', models.ForeignKey(blank=True, help_text='The doctor who ordered the laboratory test.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('lab_test', models.ForeignKey(blank=True, help_text='The laboratory test being ordered.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.service')),
                ('patient', models.ForeignKey(help_text='The patient for whom the laboratory order is created.', on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this laboratory order.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
            options={
                'verbose_name': 'Laboratory Order',
                'verbose_name_plural': 'Laboratory Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='data_recorder',
            field=models.ForeignKey(blank=True, help_text='The staff member who created this invoice.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='clinic.staffs'),
        ),
        migrations.CreateModel(
            name='Investment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('investment_type', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('date', models.DateField()),
                ('description', models.TextField(blank=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='investments', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='ImagingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('result', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='imaging_records/')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_records', to='clinic.staffs')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('imaging', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.service')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='HospitalVehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=50)),
                ('plate_number', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('vehicle_type', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hospital_vehicles', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='HealthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_health_records', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='Grant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grant_name', models.CharField(max_length=100)),
                ('funding_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('donor_name', models.CharField(max_length=100)),
                ('grant_date', models.DateField()),
                ('description', models.TextField(blank=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='grants', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='GovernmentProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_name', models.CharField(max_length=100)),
                ('funding_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('eligibility_criteria', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='government_programs', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='ExpenseCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expense_categories', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField()),
                ('additional_details', models.TextField(blank=True)),
                ('receipt', models.FileField(blank=True, null=True, upload_to='expense_receipts/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.expensecategory')),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the medical equipment.', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the equipment.')),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer of the equipment.', max_length=100)),
                ('serial_number', models.CharField(blank=True, help_text='Serial number of the equipment for tracking.', max_length=50)),
                ('acquisition_date', models.DateField(blank=True, help_text='Date when the equipment was acquired.', null=True)),
                ('warranty_expiry_date', models.DateField(blank=True, help_text='Expiry date of the warranty.', null=True)),
                ('location', models.CharField(blank=True, help_text='Location where the equipment is stored.', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the equipment is currently active and operational.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the equipment was added to inventory.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the equipment was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this equipment.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_equipment_records', to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipment',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeDeduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deducted_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employee_deductions', to='clinic.staffs')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.employee')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.deductionorganization')),
                ('payroll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.payroll')),
            ],
        ),
        migrations.AddField(
            model_name='employee',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='employee',
            name='name',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs'),
        ),
        migrations.CreateModel(
            name='DiseaseRecode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_name', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(max_length=25, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='disease_records', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='DischargesNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discharge_condition', models.CharField(max_length=255)),
                ('discharge_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, null=True)),
                ('discharge_date', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='deductionorganization',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='deduction_organizations', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='country',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='countries', to='clinic.staffs'),
        ),
        migrations.CreateModel(
            name='Counseling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counselling_notes', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Detailed notes from the counseling session.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the counseling session was recorded.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the counseling record was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this counseling session.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='The patient receiving counseling.', on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this counseling session.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
            options={
                'verbose_name': 'Counseling',
                'verbose_name_plural': 'Counseling Sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConsultationOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.service')),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='consultation_data_recorder', to='clinic.staffs')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='ConsultationNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_of_presenting_illness', models.TextField(blank=True, null=True)),
                ('review_of_systems', models.TextField(blank=True, null=True)),
                ('physical_examination', models.TextField(blank=True, null=True)),
                ('doctor_plan', models.TextField()),
                ('doctor_plan_note', models.TextField(blank=True, null=True)),
                ('allergy_summary', models.TextField(blank=True, null=True)),
                ('known_comorbidities_summary', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.staffs')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField(help_text='The scheduled date for the consultation.')),
                ('start_time', models.TimeField(blank=True, help_text='The scheduled start time for the consultation.', null=True)),
                ('end_time', models.TimeField(blank=True, help_text='The scheduled end time for the consultation.', null=True)),
                ('description', models.TextField(blank=True, help_text='Additional notes or description for the consultation.', null=True)),
                ('status', models.IntegerField(choices=[(0, 'Pending'), (1, 'Completed'), (2, 'Canceled'), (3, 'Rescheduled'), (4, 'No-show'), (5, 'In Progress'), (6, 'Confirmed'), (7, 'Arrived')], default=0, help_text='Current status of the consultation appointment.')),
                ('appointment_number', models.CharField(help_text='Unique identifier for this appointment.', max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the appointment was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the appointment was last updated.')),
                ('created_by', models.ForeignKey(blank=True, help_text='The staff member who created this appointment.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_consultations', to='clinic.staffs')),
                ('doctor', models.ForeignKey(help_text='The doctor conducting the consultation.', on_delete=django.db.models.deletion.CASCADE, related_name='doctor_consultations', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='The patient attending the consultation.', on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this consultation.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
            options={
                'verbose_name': 'Consultation',
                'verbose_name_plural': 'Consultations',
                'ordering': ['-appointment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClinicCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the company', max_length=255)),
                ('registration_number', models.CharField(help_text='Company registration number', max_length=100, unique=True)),
                ('address', models.TextField(help_text='Address of the company')),
                ('city', models.CharField(help_text='City where the company is located', max_length=100)),
                ('state', models.CharField(help_text='State where the company is located', max_length=100)),
                ('country', models.CharField(help_text='Country where the company is located', max_length=100)),
                ('postal_code', models.CharField(help_text='Postal code of the company', max_length=20)),
                ('phone_number', models.CharField(help_text='Contact phone number of the company', max_length=20)),
                ('email', models.EmailField(help_text='Email address of the company', max_length=254, unique=True)),
                ('website', models.URLField(blank=True, help_text='Website URL of the company', null=True)),
                ('logo', models.ImageField(blank=True, help_text='Company logo image', null=True, upload_to='company_logos/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_companies', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='ClinicChiefComplaint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('other_complaint', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clinic_chief_complaints', to='clinic.staffs')),
                ('health_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.healthrecord')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
        ),
        migrations.AddField(
            model_name='clients',
            name='data_recorder',
            field=models.ForeignKey(blank=True, help_text='The staff member who recorded this client.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='clinic.staffs'),
        ),
        migrations.AddField(
            model_name='bankaccount',
            name='data_recorder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='clinic.staffs'),
        ),
        migrations.CreateModel(
            name='AmbulanceVehicleOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_type', models.CharField(blank=True, help_text='Type of ambulance vehicle required.', max_length=100, null=True)),
                ('activities', models.CharField(blank=True, help_text='Activities or events the ambulance will be used for.', max_length=255, null=True)),
                ('ambulance_number', models.CharField(blank=True, help_text='Assigned ambulance vehicle number.', max_length=100, null=True)),
                ('organization', models.CharField(blank=True, help_text='Name of the organization requesting the ambulance.', max_length=255, null=True)),
                ('contact_person', models.CharField(blank=True, help_text='Contact person at the requesting organization.', max_length=100, null=True)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number for the organization.', max_length=20, null=True)),
                ('location', models.CharField(blank=True, help_text='Location where the ambulance service is needed.', max_length=100, null=True)),
                ('duration', models.IntegerField(help_text='Duration of service in hours.')),
                ('days', models.IntegerField(help_text='Duration of service in days.')),
                ('cost', models.DecimalField(decimal_places=2, help_text='Cost of the ambulance vehicle service.', max_digits=10)),
                ('payment_mode', models.CharField(blank=True, help_text='Method of payment for the service.', max_length=100, null=True)),
                ('order_date', models.DateField(blank=True, help_text='The date the vehicle order was placed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the vehicle order was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the vehicle order was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this vehicle order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ambulance_vehicle_orders', to='clinic.staffs')),
            ],
            options={
                'verbose_name': 'Ambulance Vehicle Order',
                'verbose_name_plural': 'Ambulance Vehicle Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AmbulanceRoute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_location', models.CharField(max_length=100)),
                ('to_location', models.CharField(max_length=100)),
                ('distance', models.FloatField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('profit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('advanced_ambulance_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total', models.FloatField(editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ambulance_routes', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='AmbulanceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(help_text='Type of ambulance service required.', max_length=100)),
                ('from_location', models.CharField(help_text='Pickup location for the ambulance.', max_length=100)),
                ('to_location', models.CharField(help_text='Destination location for the ambulance.', max_length=100)),
                ('order_date', models.DateField(blank=True, help_text='The date the ambulance order was placed.', null=True)),
                ('age', models.CharField(help_text="Patient's age at time of ambulance request.", max_length=50)),
                ('condition', models.CharField(help_text="Patient's medical condition requiring ambulance.", max_length=100)),
                ('intubation', models.CharField(help_text='Intubation status of the patient.', max_length=100)),
                ('pregnancy', models.CharField(help_text='Pregnancy status if applicable.', max_length=100)),
                ('oxygen', models.CharField(help_text='Oxygen requirement status.', max_length=100)),
                ('ambulance_type', models.CharField(help_text='Type of ambulance required (basic, advanced, etc.).', max_length=100)),
                ('duration_hours', models.IntegerField(help_text='Duration of ambulance service in hours.')),
                ('duration_days', models.IntegerField(help_text='Duration of ambulance service in days.')),
                ('cost', models.DecimalField(decimal_places=2, help_text='Cost of the ambulance service.', max_digits=10)),
                ('payment_mode', models.CharField(help_text='Method of payment for the ambulance service.', max_length=100)),
                ('ambulance_number', models.CharField(help_text='Unique identifier for this ambulance order.', max_length=20, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the ambulance order was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the ambulance order was last updated.')),
                ('data_recorder', models.ForeignKey(blank=True, help_text='The staff member who recorded this ambulance order.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ambulance_data_recorder', to='clinic.staffs')),
                ('patient', models.ForeignKey(help_text='The patient requiring ambulance service.', on_delete=django.db.models.deletion.CASCADE, to='clinic.patients')),
                ('visit', models.ForeignKey(blank=True, help_text='The visit associated with this ambulance order.', null=True, on_delete=django.db.models.deletion.CASCADE, to='clinic.patientvisits')),
            ],
            options={
                'verbose_name': 'Ambulance Order',
                'verbose_name_plural': 'Ambulance Orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AmbulanceActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('profit', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_recorder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ambulance_activities', to='clinic.staffs')),
            ],
        ),
        migrations.CreateModel(
            name='AdminHOD',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_hod', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MedicineDosage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dosage_value', models.DecimalField(decimal_places=2, help_text='Dosage value (e.g., 125, 250, 500)', max_digits=10)),
                ('is_default', models.BooleanField(default=False, help_text='Is this the default dosage for this medicine?')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the medicine was added to inventory.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the medicine was last updated.')),
                ('medicine', models.ForeignKey(help_text='The medicine this dosage option belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='dosages', to='clinic.medicine')),
                ('unit', models.ForeignKey(help_text='Unit of measurement (e.g., mg, ml, tab).', on_delete=django.db.models.deletion.PROTECT, related_name='dosages', to='clinic.medicineunitmeasure')),
            ],
            options={
                'ordering': ['dosage_value'],
                'unique_together': {('medicine', 'dosage_value', 'unit')},
            },
        ),
        migrations.CreateModel(
            name='MedicineBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_number', models.CharField(max_length=50)),
                ('expiration_date', models.DateField()),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('remain_quantity', models.PositiveIntegerField(default=0)),
                ('buying_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('medicine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='clinic.medicine')),
            ],
            options={
                'unique_together': {('medicine', 'batch_number')},
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('create', 'Created'), ('update', 'Updated'), ('delete', 'Deleted')], max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clinic.patients')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Activities',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='clinic_acti_content_4cbe19_idx'), models.Index(fields=['activity_type'], name='clinic_acti_activit_f9604d_idx'), models.Index(fields=['patient'], name='clinic_acti_patient_bfc985_idx')],
            },
        ),
    ]
